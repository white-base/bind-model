/* eslint-disable */
export default {
    "EL01610": "---- Common ----",
    "EL01611": "validSelector; document object is required",
    "EL01612": "loadScript(url, callback); url is not of string type",
    "EL01613": "loadScript(url, callback); document object is required",
    "EL01614": "",
    "EL02310": "---- i-bind.js ----",
    "EL02311": "addColumn() is an abstract method. [$1] must be implemented",
    "EL02320": "---- i-bind-model.js ----",
    "EL02321": "",
    "EL02330": "---- i-bind-command.js ----",
    "EL02331": "Execute() is an abstract method. [$1] must be implemented",
    "EL02340": "---- i-command-callback.js ----",
    "EL02341": "",
    "EL02350": "---- i-model-callback.js ----",
    "EL02351": "",
    "EL02360": "---- i-service.js ----",
    "EL02361": "",
    "EL02370": "---- i-service-ajax.js ----",
    "EL02371": "",
    "EL054600": "---- html-column.js ----",
    "EL054601": "$1.domType is object type",
    "EL054602": "$1.isReadOnly is boolean type",
    "EL054603": "$1.isHide is boolean type",
    "EL054604": "$1.element is object type",
    "EL054605": "$1.selector type is string | {key: string, type: string}",
    "EL054606": "$1.getFilter is function type",
    "EL054607": "$1.setFilter is function type",
    "EL054608": "When you get $1.value, selector type='prop' must specify a subordinate name ($2. substitute name)",
    "EL054609": "When obtaining $1.value, selector type='attr' must specify a subordinate name ($2. substitute name)",
    "EL054610": "When obtaining $1.value, selector type='css' must specify a subordinate name ($2. subsidiary name)",
    "EL054611": "Only selector type='value' | 'value' | 'text' | 'prop' | 'attr' | 'css' when you get $1.value.",
    "EL054612": "Only number, string, boolean type is allowed when setting $1.value.",
    "EL054613": "When setting $1.value, selector type='prop' must specify a substitute name ($2. substitute name)",
    "EL054614": "When setting $1.value, selector type='attr' must specify a substitute name ($2. substitute name)",
    "EL054615": "When setting $1.value, selector type='css' must specify a subordinate name ($2. subsidiary name)",
    "EL054616": "Only selector type='value' | 'value' | 'text' | 'prop' | 'attr' | 'css' when setting $1.value.",
    "EL054617": "",
    "EL06100": "---- Meta.Entity.Bind.* ----",
    "EL06110": "---- base-bind.js ----",
    "EL06111": "$1._baseTable [MetaTable] instance not,",
    "EL06112": "$1.onExecute is of type 'function' ",
    "EL06113": "$1.onExecutted is of type 'function' ",
    "EL06114": "addColumn() is an abstract method",
    "EL061200": "---- bind-model.js ----",
    "EL061201": "$1._tables value is not of type [MetaTableCollection]",
    "EL061202": "$1._columnType value is not a child of [MetaColumn]",
    "EL061203": "$1.items value is not of type [PropertyCollection]",
    "EL061204": "$1.fn value is not of [PropertyCollection] type",
    "EL061205": "$1.command value is not of type [PropertyCollection]",
    "EL061206": "$1.cbFail is of type '(msg: stirng, valid: MetaView) => void'",
    "EL061207": "$1.cbError 는  '(msg: string, status: number, response: object) => void' It's type.",
    "EL061208": "$1.cbBaseBegin is of type '(cmd: BaseBindcommand) => void'",
    "EL061209": "$1.cbBaseValid 는  '(valid: MetaView, cmd: BaseBindCommand) => boolean' It's type.",
    "EL061210": "$1.cbBaseBind 는  '(view: MetaView, cmd: BaseBindCommand, config: object) => void' It's type.",
    "EL061211": "$1.cbBaseResult 는  '(data: object, cmd: BaseBindCommand, res: object) => object' It's type.",
    "EL061212": "$1.cbBaseOutput 는  '(views: MetaViewColleciton, cmd: BaseBindCommand, res: object) => void' It's type.",
    "EL061213": "$1.cbBaseEnd 는  '(status: number, cmd: BaseBindCommand, res: object) => void' It's type.",
    "EL061214": "$1.preRegister is of type '(bm: BaseBindModel) => void'",
    "EL061215": "$1.preCheck is of type '(bm: BaseBindModel) => boolean'",
    "EL061216": "$1.preReady is of type '(bm: BaseBindModel) => void'",
    "EL061217": "Column name is not of type 'string'. typeof columnName = '$1'",
    "EL061218": "_readItem(item, bEntity); item is of type string | string[]",
    "EL061219": "_readItem(); target table does not exist",
    "EL061220": "_readItem(); Target table is not of type [MetaTable]",
    "EL061221": "_readItem(); column generation failed",
    "EL061222": "setObject(oGuid, origin); oGuid.['_baseTable']$set lookup failed.guid = '$1'",
    "EL061223": "setObject(oGuid, origin); oGuid.['_baseTable'] guid not found: guid = '$1'",
    "EL061224": "addTable(name); name is of type 'string'. type of name = '$1'",
    "EL061225": "addTable(name); name value '$1' is a reserved word,",
    "EL061226": "addTable(name); name value '$1' is duplicated with an existing name",
    "EL061227": "addColumn(column, cmds, views, bTable); column 은 string | MetaColumn It's type.",
    "EL061228": "addColumn(column, cmds, views, bTable); cmds 은 string | string[] It's type.",
    "EL061229": "addColumn (column, cmds, views, bTable); Target table does not exist",
    "EL061230": "addColumn(column, cmds, views, bTable); cmds[$1] is not of string type. typeof cmds[$1] = '$2'",
    "EL061231": "addColumn(cmds, views, bTable); target command does not exist. cmds[$1] = '$2'",
    "EL061232": "addColumnValue(name, value, cmds, views, bTable); name 는 'string' It's type.",
    "EL061233": "addColumnValue (name, value, cmds, views, bTable); Target table does not exist",
    "EL061234": "mapping is not PropertyCollection | object type",
    "EL061235": "Target table does not exist",
    "EL061236": "column or item named '$1' does not exist // REVIEW: removed", 
    "EL061237": "setMapping (bTable); Mapping failed",
    "EL061238": "addcommand() is an abstract method. [$1] must be inherited and implemented.",
    "EL061239": "tables are of string | string[] type",
    "EL061240": "setservice(service, passChk); service setup failed // REVIEW: removed", 
    "EL061241": "command views are of type string[]. type of views == '$1'",
    "EL061242": "",
    "EL061300": "---- bind-command.js ----",
    "EL061301": "$1.valid [MetaView] instance not",
    "EL061302": "$1.bind [MetaView] instance not",
    "EL061303": "$1.outputOption Type is stirng | number { option: string, index: number | number[], schema: string } 입니다.",
    "EL0613031": "$1.outputOption string can be either option 'SEND', 'VIEW', 'ALL', 'PICK', or schema 'AUTO', 'DATA', 'ENTITY'",
    "EL0613032": "$1.outputOptions.option is one of 'SEND', 'VIEW', 'ALL', 'PICK'",
    "EL0613033": "$1.outputOptions.schema is one of 'AUTO', 'DATA', 'ENTITY'",
    "EL0613034": "$1.outputOptions.index is of type number | number[]",
    "EL061304": "$1.cbBegin is of type '(cmd: BaseBindcommand) => void'",
    "EL061305": "$1.cbValid 는  '(valid: MetaView, cmd: BaseBindCommand) => boolean' It's type.",
    "EL061306": "$1.cbBind 는  '(view: MetaView, cmd: BaseBindCommand, config: object) => void' It's type.",
    "EL061307": "$1.cbResult 는  '(data: object, cmd: BaseBindCommand, res: object) => object' It's type.",
    "EL061308": "$1.cbOutput 는  '(views: MetaViewColleciton, cmd: BaseBindCommand, res: object) => void' It's type.",
    "EL061309": "$1.cbEnd 는  '(status: number, cmd: BaseBindCommand, res: object) => void' It's type.",
    "EL061310": "Column name is not of type 'string'. typeof columnName = '$1'",
    "EL061311": "Output['$1'] setting is MetaView type only",
    "EL061312": "setObject(oGuid, origin); oGuid.['_baseTable'] $set lookup failed: guid = $1",
    "EL061313": "setObject(oGuid, origin); oGuid.['_baseTable'] guid not found: guid = $1",
    "EL061314": "setObject(oGuid, origin); oGuid.['_model'] $set lookup failed. guid = $1",
    "EL061315": "Execute() is an abstract method. [$1] must be inherited and implemented.",
    "EL061316": "addColumn(column, views, bTable); Column is string | Meta Column type.",
    "EL061317": "addColumn(column, views, bTable); views are of the type string | string[].",
    "EL061318": "addColumn(column, views, bTable); Target table does not exist",
    "EL061319": "addColumn(column, views, bTable); views[$1] is not of string type. typeof views[$1] = '$2'",
    "EL061320": "addColumn(column, views, bTable); target views do not exist. views[$1] = '$2'",
    "EL061321": "addColumnValue(name, value, views, bTable); name is of type 'string'. typeof name = $1",
    "EL061322": "addColumnValue (name, value, views, bTable); Target table does not exist",
    "EL061323": "setColumn(names, views, bTable); The name is the string | string[] type.",
    "EL061324": "setColumn(names, views, bTable); names[$1] is not a string type. typeof names[$1] = '$2'",
    "EL061325": "setColumn(name, value, views, bTable); Target table does not exist",
    "EL061326": "setColumn(name, value, views, bTable); column($1) does not exist in target table",
    "EL061327": "release(names, views); The name is the string | string[] type.",
    "EL061328": "release(names, views); views are of the type string | string[].",
    "EL061329": "release(names, views); views[$1] is not of string type: typeof views[$1] = '$2'",
    "EL061330": "release(names, views); view($1) named '$1' does not exist",
    "EL061331": "newOutput(name); name is not of string type.",
    "EL061332": "newOutput(name); name value '$1' is duplicated with existing name",
    "EL061333": "removeOutput(name); name is not of string type: typeof name = '$1'",
    "EL061334": "removeOutput(name); built-in output($1) cannot be deleted",
    "EL061335": "removeOutput(names); view($1) named '$1' does not exist",
    "EL061336": "$1.state type is number",
    "EL06140": "---- empty ----",
    "EL06150": "---- bind-model.js ----",
    "EL06151": "$1.baseConfig is object type",
    "EL06152": "$1.url is the string type",
    "EL06153": "checkSelector(collection, viewLog); The collection is not of the [PropertyCollection] type.",
    "EL06154": "getSelector(collection); The collection is not of the [PropertyCollection] type.",
    "EL06155": "addcommand(name, opt, bTable); name is not of string type. typeof name = '$1'",
    "EL06156": "addcommand(name, opt, bTable); command addition failed",
    "EL06157": "setService(service, passChk); service setup failed",
    "EL06158": "addSelector(); selector is not of value, html, text type",
    "EL06159": "addSelector(); selector is not of string | object type. typeof selector = '$1'",
    "EL0615A": "addSelector(); addition of selector failed",
    "EL06160": "---- bind-command-ajax.js ----",
    "EL06161": "$1.config is object type",
    "EL06162": "$1.url is the string type",
    "EL06163": "_execOutput(data, res); data is not object | array type. typeof data = '$1'",
    "EL06164": "_execOutput(data, res); outputOption.index[$1] Value is not number. typeof outputOption.index[$1] = '$2'",
    "EL06165": "_execOutput(data, res); _output['$1'].columns does not exist",
    "EL06166": "[$2]th row does not exist in _execOutput(data, res); _output['$1'].rows",
    "EL06167": ""
}