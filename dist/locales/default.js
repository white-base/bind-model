export default {
  "ES010": "Other errors",
  "ES011": "Failed to get module ['$1']",
  "ES012": "Failed to get function ['$1'()",
  "ES013": "[$1] failed to process [$2]",
  "ES021": "[$1] can only be of type [$2]",
  "ES022": "[$1] is an unprocessable typo",
  "ES023": "[$1] is not type [$2]",
  "ES031": "[$1] is not an object",
  "ES032": "[$1] is not an instance of [$2]",
  "ES033": "The object in [$1] is different from [$2]",
  "ES041": "[$1] is duplicated with [$2]",
  "ES042": "[$2] exists in [$1] and cannot measure [$3]",
  "ES043": "[$1] cannot be added because [$1] exists in [$1] ",
  "ES044": "[$1] is a reserved word ",
  "ES051": "Required value [$1] not found",
  "ES052": "[$1] requires [$2]",
  "ES053": "[$2] does not exist in [$1]",
  "ES054": "[$1] cannot be blanked",
  "ES061": "Exceeded the range [$2] of [$1]",
  "ES062": "[$1] cannot be less than [$2]",
  "ES063": "[$1] and [$2] have different lengths",
  "ES064": "and(&) condition check failed. $1",
  "ES065": "Or(|) condition check failed. $1",
  "ES066": "[$1] ranges from [$2] to [$3]",
  "EL01100": "----- util-type.js match -----",
  "EL01101": "Type match: You must specify a detailed type of $1.$1: $2",
  "EL01102": "Type match : target is not type '$1'. tarType : $2",
  "EL01103": "Type match: cannot handle type",
  "EL01110": "----- match array -----",
  "EL01111": "Array match: target is not array type. tarType: $1",
  "EL01112": "Array match : array(_ANY_) type must have at least one element of target array. target.length = $1",
  "EL01113": "Array match: target array is less than array(_SEQ_) type length. extType.length = $1, target.length = $2",
  "EL01114": "Array match: array(_SEQ_) [$1]th literal type is different from target value. extType[$1] = $2, target[$1] = $3",
  "EL01115": "Array match: array(_SEQ_) [$1]th type check failed. extType[$1] = $2",
  "EL01116": "Array match : array(_REQ_) type must have at least one element of target array. target.length = $1",
  "EL01117": "Array match : array($1) is the type of array that cannot be handled",
  "EL01118": "Array match: array element check failed. extType: $1, tarType: $2",
  "EL01120": "----- match choice -----",
  "EL01121": "Choice match: 'undefined' is not available for choice(_ANY_) type",
  "EL01122": "Choice match: 'undefined' only for choice(_NON_) type",
  "EL01123": "Choice match: Error instance only for choice(_ERR_) type",
  "EL01124": "Choice match: choice(_EUM_) type details can only be literal. extType[$1]: $2",
  "EL01125": "Choice match: the first subtype of choice(_DEF_) type is literal only. extType[0]: $1",
  "EL01126": "Choice match : choice($1) is a type of choice that cannot be handled",
  "EL01127": "Choice match: choice detailed type check failed. extType: $1, tarType: $2",
  "EL01130": "----- match class -----",
  "EL01131": "Class match: Inspection failed after creating class type as union type (opt = 1)",
  "EL01132": "Class match: target is not an instance of [$1]",
  "EL01133": "Class match: target is not class, object, or union type. tarType: $1",
  "EL01140": "----- match union -----",
  "EL01141": "Union match: target is not union type. tarType: $1",
  "EL01142": "Union match: target['$1'] key does not exist. extType['$1'] = $2",
  "EL01143": "Union match: '$1' type check failed",
  "EL01150": "----- match function -----",
  "EL01151": "Function match: target is not function type. tarType: $1",
  "EL01152": "Function match: declared extType.name = '$1' and target name do not match: function.name = '$2'",
  "EL01153": "Function match : declared extType.func, target.func is not function type",
  "EL01154": "Function match: extType.func and target.func are different (proto check)",
  "EL01155": "Function match: You must set the params or return object of the target. extType.param = $1, extType.return = $2",
  "EL01156": "Function match: params acceptance test denied. <array(_SEQ_) conversion>",
  "EL01157": "Function Match: Return Acceptance Test Denied",
  "EL01200": "----- allow -----",
  "EL01201": "Type allowed: You must specify a subtype of $1.$1: $2",
  "EL01202": "Type allowed: different from type 1 literal value. extType = $2, tarType = $3",
  "EL01203": "Type allowed: not type $1. tarType = $2",
  "EL01204": "Type allowed: type not processable",
  "EL01210": "----- allow array -----",
  "EL01211": "Array permit: Not array type. tarType: $1",
  "EL01212": "Type allowed: array(_ALL_, _OPT_) type is not allowed for array(_ANY_) type. tarType: $1",
  "EL01213": "Allow array: Only array(_SEQ_) type is allowed for array(_SEQ_) type. tarType: $1",
  "EL01214": "Array permit: tarType must be equal to or greater than the length of array(_SEQ_) type of extType.length = $1, target.length = $2",
  "EL01215": "Array Allowance: array(_SEQ_) [$1]th type check failed",
  "EL01216": "Allow array : Do not allow array(_ALL_, _ANY_, _OPT_) type for array(_REQ_). tarType: $2",
  "EL01217": "Allow array: Do not allow array(_ALL_, _ANY_) type for array(_OPT_). tarType: $2",
  "EL01218": "Allow array : array($1) is the type of array that cannot be handled",
  "EL01219": "Array element check failed. extType: $1, tarType: $2",
  "EL01220": "----- allow choice -----",
  "EL01221": "Choice allowed: do not allow choice(_ERR_) type for choice(_ALL_). tarType: $1",
  "EL01222": "Choice allowed: 'undefined' type is not allowed for choice(_ANY_) type",
  "EL01223": "Choice allowed: choice(_NON_, _ERR_) type is not allowed for choice(_ANY_) type. tarType: $1",
  "EL01224": "Choice allowed: only choice(_NON_) type and choice(_NON_) type. tarType: $1",
  "EL01225": "Choice allowed: choice(_ERR_) type and choice(_ERR_) type only. tarType: $1",
  "EL01226": "Choice allowed: do not allow choice(_ALL_, _ANY_, _OPT_, _NON_, _ERR_) type for choice(_REQ_). tarType: $1",
  "EL01227": "Choice allowed: do not allow choice(_ALL_, _ANY_, _NON_, _ERR_) type for choice(_OPT_). tarType: $1",
  "EL01228": "Choice allowed: choice(_EUM_) type and choice(_EUM_) type only",
  "EL01229": "Choice allowed: choice(_EUM_) subtype can only be literal. extType[$1]: $2",
  "EL0122A": "Choice allowed: the subtype of tarType choice(_EUM_) can only be literal. tarType[$1]: $2",
  "EL0122B": "Choice allowed: choice(_DEF_) type and choice(_DEF_) type only",
  "EL0122C": "Choice allowed: the first subtype of extType choice(_DEF_) is literal only. extType[0]: $1",
  "EL0122D": "Choice allowed: the first subtype of tarType choice(_DEF_) is literal only. tarType[0]: $1",
  "EL0122E": "Choice allowed: choice($1) is a type of choice that cannot be handled",
  "EL0122F": "Choice allowed: tarType[$1] = $3, no extType allowed. extType = $2",
  "EL01230": "----- allow class -----",
  "EL01231": "Class allowed: ExtType, tarType class failed after creating a union type. (opt = 1)",
  "EL01232": "Class allowed: class to class denied. (opt = $1)",
  "EL01233": "Class allowed: Inspection failed after creating tarType class type as union type (opt = 1)",
  "EL01234": "Class allowed: class to union denied. (opt = $1)",
  "EL01235": "Class allowed: tarType is not class, union type. tarType: $1",
  "EL01240": "----- allow union -----",
  "EL01241": "Union allowed: tarType is not a union type. tarType: $1",
  "EL01242": "Union allowed: tarType['$1'] key does not exist. extType['$1'] = $2",
  "EL01243": "Union allowed: Type '$1' check failed",
  "EL01250": "----- allow function -----",
  "EL01251": "Allow function : tarType is not function type. tarType : $1",
  "EL01252": "Function allowed: declared extType.name = '$1' and target name do not match: function.name = '$2'",
  "EL01253": "Function allowed: declared extType.func, target.func is not of function type",
  "EL01254": "Function allowed: extType.func and target.func are different (proto check)",
  "EL01255": "Function permit: params or return object of tarType must be set. extType.param = $1, extType.return = $2",
  "EL01256": "Function permit: params permit test denied. <array(_SEQ_) conversion>",
  "EL01257": "Function Permitted: Return Permitted Test Denied",
  "EL01300": "----- util-type.js -----",
  "EL01301": "Parcing check: function is not a rule: '$1'",
  "EL01302": "Parcing inspection: function has no argument, body content. '$1'",
  "EL01303": "Parcing inspection: function parsing failed $1",
  "EL01304": "Type check: [$1] is a special type to handle",
  "EL01305": "Type check: array($1) type is a specular type that cannot be handled",
  "EL01306": "Type check: choice($1) type is a special type that cannot be handled",
  "EL01307": "Type check: array($1) type is a type that cannot be handled",
  "EL01308": "Type check: choice($1) type is a type that cannot be handled",
  "EL01309": "REVIEW:",
  "EL0130A": "Type allowed: allowType (extType, tarType) scan failed",
  "EL0130B": "Type match: matchtype (extType, target) check failed",
  "EL0130C": "ctor is not function type. type aperture = $1",
  "EL01400": "----- util.js -----",
  "EL01401": "implements(ctor, obj, args..); ctor is not of type <function> == '$1'",
  "EL01402": "implements(ctor, obj, args..); obj is not of type <object> type of obj == '$1'",
  "EL01403": "implements(ctor, obj, args..); args[$1] is not type <function>. type of args[$1] == '$2'",
  "EL01404": "[$1] must implement type [$2]. $1._KIND = '$3'",
  "EL01405": "isImplementOf(target); target is of type <function, string> only. type of target = '$1'",
  "EL01500": "----- etc -----",
  "EL01501": "$1.$events is obejct type. type of $events $2",
  "EL01502": "$1.isLog is boolean type. type isLog $2",
  "EL01503": "on(event, listener); event is not of type <string> type of event == '$1'",
  "EL01504": "on(event, listener); listener is not of type <function> type of listener == '$1'",
  "EL01505": "once(event, listener); event is not of string type. typeof event == '$1'",
  "EL01506": "once(event, listener); listener 는 <function> 타입이 아닙니다. typeof listener == '$1'",
  "EL01507": "off(event, listener); event is not of type <string> type of event == '$1'",
  "EL01508": "off(event, listener); listener 는 <function> 타입이 아닙니다. typeof listener == '$1'",
  "EL01509": "emit(event); event is not of type <string> type of event == '$1'",
  "EL01510": "",
  "EL02100": "----- Interface.* -----",
  "EL02110": "----- i-object.js -----",
  "EL02111": "getType(): array<function> is an abstract method. [$1] must be implemented",
  "EL02112": "instanceOf(any): boolean is an abstract method. [$1] must be implemented",
  "EL02113": "equal(any): boolena is an abstract method. [$1] must be implemented",
  "EL02120": "----- i-marshal.js -----",
  "EL02121": "getObject(opt?, origin?) : object is abstract method. [$1] must be implemented",
  "EL02122": "setObject(mObj) is an abstract method. [$1] must be implemented",
  "EL02130": "----- i-element.js -----",
  "EL02131": "clone(): object is an abstract method. [$1] must be implemented",
  "EL02140": "----- i-list.js -----",
  "EL02150": "----- i-control-list.js -----",
  "EL02151": "add(key) is an abstract method. [$1] must be implemented",
  "EL02152": "del(key) is an abstract method. [$1] must be implemented",
  "EL02153": "has(key): boolean is an abstract method. [$1] must be implemented",
  "EL02154": "find(any): any is an abstract method. [$1] must be implemented",
  "EL02160": "----- i-collection.js -----",
  "EL02161": "add(any): boolean is an abstract method. [$1] must be implemented",
  "EL02162": "remove(elem): boolean is an abstract method. [$1] must be implemented",
  "EL02163": "cantains(any): boolean is an abstract method. [$1] must be implemented",
  "EL02164": "indexOf(any): number is an abstract method. [$1] must be implemented",
  "EL02170": "----- i-collection-array.js -----",
  "EL02171": "insertAt(pos, val, ..): boolean is an abstract method. [$1] must be implemented",
  "EL02180": "----- i-collection-property.js -----",
  "EL02181": "indexToKey(idx): string is an abstract method. [$1] must be implemented",
  "EL02190": "----- i-serialize.js -----",
  "EL02191": "output(opt, ...): string is an abstract method. [$1] must be implemented",
  "EL02192": "load(any, ...) is an abstract method. [$1] must be implemented",
  "EL02300": "----- Meta.Entity.* -----",
  "EL03100": "----- Meta.* -----",
  "EL03110": "----- meta-object.js -----",
  "EL03111": "You cannot create abstract, interface, enum type. $1['_KIND'] = '$2'",
  "EL03112": "setObject(oGuid, origin); oGuid 는 'object' 타입입니다. typeof oGuid = '$1'",
  "EL03113": "setObject(oGuid, origin); different namespaces. this._type = $1, oGuid._type = $2",
  "EL03114": "setObject(oGuid, origin); origin 은 Guid 객체가 아닙니다. origin._type = '$1', origin._guid = '$2'",
  "EL03120": "----- meta-element.js -----",
  "EL03121": "$name;val is of type 'string'. type of valve = '$1'",
  "EL03122": "$name; val.length must be greater than 0",
  "EL03200": "----- meta-registry.js -----",
  "EL03211": "register(meta); the meta to register is not a Guide object. meta._type = '$1', meta._guid = '$2'",
  "EL03212": "register(meta); meta._guid to register is already registered. meta._guid = '$1'",
  "EL03213": "release(meta); the meta to release is string(guid) | object(guid) type only. type of meta = '$1'",
  "EL03220": "----- create -----",
  "EL03221": "createMetaObject(oGuid, origin); oGuid can only be of type 'object'. typeof oGuid = '$1'",
  "EL03222": "createMetaObject(oGuid, origin); oGuid._type 은 'string' 타입만 가능합니다.(length > 0) typeof oGuid._type = '$1'",
  "EL03223": "createMetaObject(oGuid, origin); origin can only be of type 'object'. typeof origin = '$1'",
  "EL03224": "createMetaObject(oGuid, origin);[$1] Namespace is not of type 'function'. type of coClass = '$2'",
  "EL03225": "createReferObject(meta); meta can only be of type 'object'. type of meta = '$1'",
  "EL03226": "createReferObject(meta); meta._guid 은 'string' 타입만 가능합니다.(length > 0) typeof meta._guid = '$1'",
  "EL03227": "createNsReferObject(fun); fun is not type 'function'. type of fun = '$1'",
  "EL03230": "----- ns Class -----",
  "EL03231": "register Class(fun, ns, key); fun is not of type 'function'. type of fun = '$1'",
  "EL03232": "registerClass(fun, ns, key); ns is not of type 'string'. typeofns = '$1'",
  "EL03233": "register Class(fun, ns, key); key is not of type 'string'. type of key = '$1'",
  "EL03234": "releaseClass(fullName); fullName 은 'string' 타입만 가능합니다.(length > 0) typeof fullName = '$1'",
  "EL03235": "findClass(fun); fun is not type 'function'. type of fun = '$1'",
  "EL03236": "getClass(fullName); fullName can only be of type 'string' (length > 0) type of fullName = '$1'",
  "EL03240": "----- set, transform, load -----",
  "EL03241": "setMetaObject(oGuid, meta); oGuid can only be of type 'object'. typeof oGuid = '$1'",
  "EL0324": "setMetaObject(oGuid, meta); meta can only be of type 'object'. type of meta = '$1'",
  "EL03243": "setMetaObject(meta); meta._guid can only be of type 'string' (length > 0) type of meta._guid = '$1'",
  "EL03244": "transformRefer(oGuid); oGuid can only be of type 'object'. type oGuid = '$1'",
  "EL03245": "transformRefer(oGuid); $1['$2']['$ns'] is not of type 'function'",
  "EL03246": "loadMetaObject(str, path?); str is only of type 'string'. typeof str = '$1'",
  "EL03247": "loadMetaObject(str, path?); The object parsed str is not a Guide object. obj._type = '$1', obj._guid = '$2'",
  "EL03250": "----- has, valid, find -----",
  "EL03251": "validObject(oGuid); oGuid is only of type 'object'. typeof oGuid = '$1'",
  "EL03252": "hasGuidObject(oGuid, origin); guid can only be of type 'string' (length > 0) type of guid = '$1'",
  "EL03253": "hasGuidObject(oGuid, origin); origin[$1]는 'object' 타입이 아닙니다. typeof origin[$1] = '$2'",
  "EL03254": "hasRefer(oGuid); oGuid can only be of type 'object'. typeof oGuid = '$1'",
  "EL03255": "hasRefer(oGuid); oGuid is not a Guide object. oGuid._type = '$1', oGuid._guid = '$2'",
  "EL03256": "findSetObject(oGuid, origin); [ oGuid._guid | oGuid ]는 'string' 타입만 가능합니다.(length > 0) guid = '$1'",
  "EL03257": "findSetObject(oGuid, origin); origin can only be of type 'object'. typeof origin = '$1'",
  "EL03300": "----- namespace-manager.js -----",
  "EL03310": "----- private function, proterty -----",
  "EL03311": "NamespaceManager.allowOverlap 은  'boolean' 타입만 가능합니다. typeof allowOverlap = $1",
  "EL03312": "_getArray(ns); ns is not a valid namespace name rule. ns = $1",
  "EL03313": "_getArray(ns); ns type is 'string', 'array<string>' only typeofns = $1",
  "EL03314": "_getArray(ns); ns[$1] is not type 'string'. typeofns[$1] = $2",
  "EL03315": "_getArray(ns); ns[$1] is not a valid name rule. ns[$1] = $1",
  "EL03320": "----- addNamespace, delNamespace, path -----",
  "EL0321": "addNamespace(ns); addition of namespace failed",
  "EL03322": "delNamespace(ns); Namespace deletion failed",
  "EL0323": "path(ns); failed to get the namespace path",
  "EL03330": "----- add, del -----",
  "EL03331": "add(fullName,lem); [$1] is not a valid name rule",
  "EL03332": "add(fullName,lem);lem is already registered. Allow duplicate [this.allowOverlap = 'true']",
  "EL03333": "add(fullName,lem); failed to register elements in the namespace",
  "EL03334": "del(fullName); Failed to delete element in Namespace",
  "EL03340": "----- getPath, output, load -----",
  "EL03341": "getPath(elem); no element value. typeoflem = $1",
  "EL03342": "output (stringify, space); Namespace export failed. $1",
  "EL03343": "load(str, path); str is not type 'string'. typeofstr = $1",
  "EL03344": "load(str, path); Namespace loading failed. $1",
  "EL04100": "----- Collection.* -----",
  "EL04110": "----- base-collection.js -----",
  "EL04111": "_remove(idx): boolean is an abstract method. Must be implemented",
  "EL04112": "setObject(oGuid, origin); _owner connection of oGuid failed. guid = $1",
  "EL04113": "removeAt(idx); idx is not type 'number'. typeof idx = $1",
  "EL04114": "add(any): number is an abstract method. must be implemented",
  "EL04115": "clear() is an abstract method. must be implemented",
  "EL04116": "map(callback); callback is not function type. type of callback = $1",
  "EL04117": "filter(callback); callback is not function type. type of callback = $1",
  "EL04118": "reduce(callback); callback is not function type. type of callback = $1",
  "EL04119": "find(callback); callback is not function type. type of callback = $1",
  "EL041110": "forEach(callback); callback is not function type. type of callback = $1",
  "EL041111": "Some(callback); callback is not function type. type of callback = $1",
  "EL041112": "Every(callback); callback is not function type. type of callback = $1",
  "EL041113": "findIndex(callback); callback 이 function 타입이 아닙니다. typeof callback = $1",
  "EL04200": "",
  "EL04210": "----- collection-array.js -----",
  "EL04211": "_elements connection failed for setObject(oGuid, origin); oGuid['_elem'][$1]: guid = $2",
  "EL04212": "insertAt(pos, value, desc); pos is not type 'number'. typeof pos = $1",
  "EL04213": "insertAt(pos, value, desc); pos cannot be greater than this.count.pos = $1, count = $2",
  "EL04214": "insertAt(pos, value, desc); pos cannot be less than 0. pos = $1",
  "EL04215": "insertAt(pos, value, desc); registration failed. pos = $1, value = $2",
  "EL04220": "----- collection-property.js -----",
  "EL04221": "setObject(oGuid, origin); oGuid['_lem'].length = $1 length and oGuid['_key'].length = $2 length are different",
  "EL04222": "setObject(oGuid, origin); oGuid['_elem'].length = $1 length and oGuid['_desc'].length = $2 length are different",
  "EL04223": "setObject(oGuid, origin); oGuid._elem[$1] guid not found. guid = $2",
  "EL04224": "indexOf(obj, isKey); if the index value is found by key, obj must be of type 'string'. typeof obj = $1",
  "EL04225": "add(name, value, desc); name is not of type 'string'. type of name = $1",
  "EL04226": "add(name, value, desc); name = '$1' is not valid for name rule. Rule = '$2'",
  "EL04227": "add(name, value, desc); name = '$1' is the reserved word",
  "EL04228": "add(name, value, desc); name = '$1' is duplicated with existing name",
  "EL04229": "add(name, value, desc); addition failed. name = '$1', value = '$2'",
  "EL0422A": "indexToKey(idx); idx is not of type 'number'. typeof idx = $1",
  "EL0422B": "exists(key); key is not of type 'string' (length > 0) type of key = $1",
  "EL04300": "",
  "EL04310": "----- collection-transaction.js -----",
  "EL04311": "$1.autoChanges 는 'boolean' 타입입니다. typeof aucoChanges = '$2'",
  "EL04320": "----- trans-queue.js -----",
  "EL04321": "collection value is not an instance that inherited [MetaObject]",
  "EL04322": "collection is not an instance of [ArrayCollection]",
  "EL04323": "rollback(); '$1' is an unprocessable cmd",
  "WS011": "[$1] Destination [$2] cannot be deleted",
  "EN": "OK",
  "EL02200": "---- Interface.* ----",
  "EL02210": "---- i-control-export.js ----",
  "EL02211": "write(opt): object is an abstract method. '$1' must be implemented",
  "EL02220": "---- i-control-import.js ----",
  "EL02221": "read(object) is an abstract method. '$1' must be implemented",
  "EL02230": "---- i-control-group.js ----",
  "EL02231": "merge(any, opt) is an abstract method. '$1' must be implemented,",
  "EL02232": "Copy(filter) is an abstract method. '$1' must be implemented,",
  "EL02240": "---- i-control-schema.js ----",
  "EL02241": "readSchema(json) is an abstract method. '$1' must be implemented",
  "EL02242": "writeSchema(opt): object is an abstract method. '$1' must be implemented",
  "EL02250": "---- i-transaction.js ----",
  "EL02251": "AcceptChanges() is an abstract method. '$1' must be implemented",
  "EL02252": "rejectChanges() is an abstract method. '$1' must be implemented",
  "EL05100": "---- Meta.Entity.* ----",
  "EL05110": "---- BaseColumn ----",
  "EL05111": "$1._entity value is not an instance of [MetaElement]",
  "EL05112": "$1.columnName is of type 'string'. typeof columnName = '$2'",
  "EL05113": "Existing $1.columnName'$2'",
  "EL05114": "Could not set columnName because $1.alias '$2' already exists",
  "EL05115": "$1.alias is of type 'string'. typeofalias = '$2'",
  "EL05116": "Existing $1.alias '$2'",
  "EL05117": "$1.caption is of type 'string'. typeofcaption = '$2'",
  "EL05118": "setObject(oGuid, origin); oGuid.['_entity'] guid not found. name = '$1', guid = '$2'",
  "EL05119": "clone() is an abstract method. It must be inherited and implemented.",
  "EL05120": "---- ObjectColumn ----",
  "EL05121": "_load(prop); prop is of type 'object', type of prop = '$2'",
  "EL05122": "setObject(oGuid, origin); oGuid.['default'] guid not found: guid = '$1'",
  "EL05123": "setObject(oGuid, origin); oGuid.['value'] guid not found: guid = '$1'",
  "EL05130": "---- MetaColumn ----",
  "EL05131": "$1.required is of type 'boolean', type of = '$2'",
  "EL05132": "$1.isNullPass is of type 'boolean'. typeofisNullPass = '$2' TODO: removed",
  "EL05133": "The array element of $1.constraits is of type 'function' | {regex: RegExp, msg: string}. typeof [$2].regex = '$3', [$2].msg = '$4'",
  "EL05134": "$1.getter is of type 'function', type of getter = '$2'",
  "EL05135": "$1.setter is of type 'function', type of setter = '$2'",
  "EL05136": "addConstraint (regex, msg, code, condition); regex is not a RegExp instance",
  "EL05137": "addConstraint(regex, msg, code, condition); msg 는 'string' 타입입니다. typeof msg = '$1'",
  "EL05138": "valid(value); value is a required value. columnName = '$1' ",
  "EL05139": "valid(value); function constraint failed. columnName = '$1' ",
  "EL0513A": "valid(value); regular expression constraint failed. Column name = '$1', msg = '$2'",
  "EL05140": "---- BaseColumnCollection ----",
  "EL05141": "$1._baseType is of type 'function', type of getter = '$2'",
  "EL05142": "The prototype of $1._baseType [BaseColumn] must be connected (inheritance), ",
  "EL05143": "add(name, vlaue); cannot add columnColleciton because _onwer rows exist. _onwer.rows.count = '$1'",
  "EL05144": "add(name, vlaue); cannot be added because '$2' exists in '$1'",
  "EL05145": "add(name, vlaue); cannot be added because alias '$2' exists in '$1'",
  "EL05146": "removeAt(idx); cannot remove columnColleciton because _onwer rows exist. _onwer.rows.count = '$1'",
  "EL05147": "addValue(name, value) is an abstract method. Must be implemented",
  "EL05148": "Column collection cannot use setter property. Add(), remove() method must be used TODO: removed",
  "EL05150": "---- MetaTableColumnCollection ----",
  "EL05151": "add(any); any 는 'string' | [BaseColumn] 타입입니다. typeof any = '$1'",
  "EL05152": "addValue(name, value); name 은 'string' 타입입니다. typeof name = '$1'",
  "EL05160": "---- MetaViewColumnCollection ----",
  "EL05161": "add(any, refCol); refCol value is not of type [BaseColumnCollection",
  "EL05162": "add(any, refCol); any 는 'string' | [BaseColumn] 타입입니다. typeof any = '$1'",
  "EL05163": "addValue(name, value, refCol); name 은 'string' 타입입니다. typeof name = '$1'",
  "EL05164": "addEntity(entity); entity value is not of type [BaseEntity",
  "EL05200": "",
  "EL05210": "---- MetaRow ----",
  "EL05211": "$1.constructor(entity) value is not of type [BaseEntity",
  "EL05212": "setObject(oGuid, origin); oGuid['_elem'].length = '$1' length and oGuid['_key'].length = '$2' length are different.",
  "EL05213": "setObject(oGuid, origin); oGuid['_elem']['$1'] guid not found. guid = '$2'",
  "EL05214": "changeKey(oldKey, newKey); parameter '$1' is not of type 'string'",
  "EL05215": "changeKey(oldKey, newKey); existing key does not exist. '$1'",
  "EL05216": "changeKey(oldKey, newKey); the key to be replaced overlaps with the existing key.'$1'",
  "EL05220": "---- MetaRowCollection ----",
  "EL05221": "The target's _entity object and $1._onwer object must be the same",
  "EL05222": "insertAt(pos, row, isCheck); row is not type [MetaRow]",
  "EL05223": "insertAt(pos, row, isCheck); row's _entity object and $1._onwer object must be the same",
  "EL05224": "Validation of insertAt(pos, row, isCheck);row['$1'] failed msg = '$2'",
  "EL05300": "---- base-entity.js ----",
  "EL05310": "---- property ----",
  "EL05311": "$1._mestaset value is not of type [MetaSet]",
  "EL05312": "The $1.column property must be redefined,",
  "EL05320": "---- private method :: _buildEntity, _readEntity, _readSchema - 14 ----",
  "EL05321": "_buildEntity(entity, cb, items); items['$1'] 가 'string' It's not type. typeof items['$1'] = '$2'",
  "EL05322": "_buildEntity(entity, cb, items); column name '$1' exists in this.column and cannot be added.",
  "EL05323": "_buildEntity (entity, cb, items); row creation for entity failed",
  "EL05324": "_readEntity(entity, opt); entity is not of type [BaseEntity",
  "EL05325": "_readEntity(entity, opt); opt is not of type 'number'. type of opt = '$1'",
  "EL05326": "_readEntity(entity, opt); entity read failed. opt = '$1'",
  "EL05327": "_readEntity(entity, opt); this.rows exists and cannot load column.opt = '$1'",
  "EL05328": "_readEntity(entity, opt); column name '$1' exists in this.column and cannot be added",
  "EL05329": "_readSchema(obj, isRow, origin); obj._baseEntity guid not found. guid = '$1'",
  "EL0532A": "_readSchema (obj, isRow, origin); Schema read failed",
  "EL0532B": "_readSchema(obj, isRow, origin); this.rows exists and cannot be added to column",
  "EL0532C": "_readSchema(obj, isRow, origin); this.columns['$1'] guid not found.guid = '$2'",
  "EL0532D": "_readSchema(obj, isRow, origin); this.columns['$1']._entity guid를 not found. guid = '$2'",
  "EL0532E": "_readSchema(obj, isRow, origin); column name '$1' exists in this.column and cannot be added",
  "EL05330": "---- method :: transformSchema(static), setValue, clone, select - 7, : getValue, clear, reset, newRow, getObject, setObject ----",
  "EL05331": "BaseEntity.transformSchema(oGuid); oGuid is not a schema object. oGuid = {column: $1,rows: $2}",
  "EL05332": "BaseEntity.transformSchema(oGuid); schema conversion failed",
  "EL05333": "setValue(row);row is not of type [MetaRow",
  "EL05334": "Row setting failed for setValue(row); columns",
  "EL05335": "select (filter, ...); recited from MetaRegistry.namespace to fetch '$1'",
  "EL05336": "select(filter, ...); lookup failed",
  "EL05337": "clone() is an abstract method. Must be implemented",
  "EL05338": "validate(); validation can be performed if all columns are MetaColumn type.",
  "EL05340": "---- merge, copy - 8 ----",
  "EL05341": "merge(target, opt, isMath); target is not of type [BaseEntity]",
  "EL05342": "merge(target, opt, isMath); opt is not of type 'number'. type of opt = '$1'",
  "EL05343": "merge(target, opt, isMath); opt = 1, target.columns['$1'].name = '$2' 이 column name 에 존재합니다.",
  "EL05344": "merge(target, opt, isMath); opt = 1, target.columns['$1'].name = '$2' 이 column alias 에 존재합니다.",
  "EL05345": "merge(target, opt, isMath); opt = 3, target.columns['$1'].name = '$2' 이 columns name 에 존재합니다.",
  "EL05346": "merge(target, opt, isMath); opt = 3, target.columns['$1'].name = '$2' 이 columns alias 에 존재합니다.",
  "EL05347": "merge(target, opt, isMath); merge failed. opt = '$1'",
  "EL05348": "copy() is an abstract method. must be implemented",
  "EL05350": "---- load, read, readSchema, readDate - 12 ----",
  "EL05351": "load(obj, pas); type [BaseEntity] obj cannot be loaded",
  "EL05352": "load(obj, pas); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05353": "load(obj, pas); load failed",
  "EL05354": "read(obj, opt); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05355": "read(obj, opt); opt is not of type 'number'. type of opt = '$1'",
  "EL05356": "read(obj, opt); opt values are not in the range (1-3). obj = '$1'",
  "EL05357": "read(obj, opt); read failed",
  "EL05358": "readSchema(obj, isCreate, origin); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05359": "readSchema(obj, isCreate, origin); obj is not a schema object. obj = {column: $1,rows: $2}",
  "EL0535A": "readSchema (obj, isCreate, origin); skami read failed",
  "EL0535B": "readData(obj); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL0535C": "readData(obj); obj is not a schema object. obj = {columns: $1,rows: $2}",
  "EL0535D": "readData(obj); data read failed",
  "EL05360": "---- output, write, writeSchema, writeData - 4 ----",
  "EL05361": "",
  "EL05400": "",
  "EL05410": "---- MetaTable ----",
  "EL05411": "$1.tableName value is not of type 'string'. typeoftableName = '$2'",
  "EL05412": "$1.column value is not of type [MetaTableCollection]",
  "EL05413": "$1.rows exists and cannot set columns.rows.count = '$2'",
  "EL05414": "setObject(oGuid, origin); oGuid.['_metaSet'] guid not found: guid = '$1'",
  "EL05420": "---- MetaTableColleciton ----",
  "EL05421": "$1._baseType value is not function type. typeof_baseType = '$2'",
  "EL05422": "The prototype of $1._baseType [MetaTable] must be connected. (Inheritance)",
  "EL05423": "add(any); any is 'string' | [MetaTable] type. typeofany = '$1'",
  "EL05424": "add(any); tableName = '$1' existing",
  "EL05430": "---- MetaView ----",
  "EL05431": "$1.viewName value is not of type 'string'. typeofviewName = '$2'",
  "EL05432": "$1.column value is not of type [MetaViewCollection]",
  "EL05433": "$1.rows exists and cannot set columns.rows.count = '$2'",
  "EL05434": "$1._baseEntity value is not of type [BaseEntity]",
  "EL05435": "setObject(oGuid, origin); oGuid.['_metaSet'] guid not found: guid = '$1'",
  "EL05436": "setObject(oGuid, origin); oGuid.['_baseEntivity'] guid not found: guid = '$1'",
  "EL05440": "---- MetaViewColleciton ----",
  "EL05441": "$1._baseType value is not of type 'function'. typeof_baseType = '$2'",
  "EL05442": "The prototype of $1._baseType [MetaView] must be connected (inheritance), ",
  "EL05443": "You cannot enter obj and baseEntity of type [MetaView] at the same time",
  "EL05444": "add(obj, baseEntity); baseEntity is not type [BaseEntity]",
  "EL05445": "add(obj, baseEntity); obj is 'string' | [MetaView] type. typeof obj = '$1'",
  "EL05446": "add(obj, baseEntity); viewName = '$1' existing",
  "EL05450": "---- MetaSet ----",
  "EL05451": "$1.setName value is not of type 'string'. typeofsetName = '$2'",
  "EL05452": "$1.autoChanges value is not of type 'boolean'. typeofsetName = '$2'",
  "EL05453": "MetaSet.transformSchema(oGuid); oGuid is not a schema object: oGuid = {tables:..., views:...}",
  "EL05454": "load(obj, pas); type [MetaSet] obj cannot be loaded",
  "EL05455": "load(obj, pas); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05456": "read(obj, opt); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05457": "read(obj, opt); opt is not of type 'number'. type of opt = '$1'",
  "EL05458": "readSchema(obj, isCreate); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05459": "readSchema(obj, isCreate); obj is not a schema object. obj = {tables: $1, views: $2}",
  "EL0545A": "readData(obj); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL0545B": "readData(obj); obj is not a schema object.",
  "EL01610": "---- Common ----",
  "EL01611": "validSelector; document object is required",
  "EL01612": "loadScript(url, callback); url is not of string type",
  "EL01613": "loadScript(url, callback); document object is required",
  "EL01614": "",
  "EL02310": "---- i-bind.js ----",
  "EL02311": "addColumn() is an abstract method. [$1] must be implemented",
  "EL02320": "---- i-bind-model.js ----",
  "EL02321": "",
  "EL02330": "---- i-bind-command.js ----",
  "EL02331": "Execute() is an abstract method. [$1] must be implemented",
  "EL02340": "---- i-command-callback.js ----",
  "EL02341": "",
  "EL02350": "---- i-model-callback.js ----",
  "EL02351": "",
  "EL02360": "---- i-service.js ----",
  "EL02361": "",
  "EL02370": "---- i-service-ajax.js ----",
  "EL02371": "",
  "EL054600": "---- html-column.js ----",
  "EL054601": "$1.domType is object type",
  "EL054602": "$1.isReadOnly is boolean type",
  "EL054603": "$1.isHide is boolean type",
  "EL054604": "$1.element is object type",
  "EL054605": "$1.selector type is string | {key: string, type: string}",
  "EL054606": "$1.getFilter is function type",
  "EL054607": "$1.setFilter is function type",
  "EL054608": "When you get $1.value, selector type='prop' must specify a subordinate name ($2. substitute name)",
  "EL054609": "When obtaining $1.value, selector type='attr' must specify a subordinate name ($2. substitute name)",
  "EL054610": "When obtaining $1.value, selector type='css' must specify a subordinate name ($2. subsidiary name)",
  "EL054611": "Only selector type='value' | 'value' | 'text' | 'prop' | 'attr' | 'css' when you get $1.value.",
  "EL054612": "Only number, string, boolean type is allowed when setting $1.value.",
  "EL054613": "When setting $1.value, selector type='prop' must specify a substitute name ($2. substitute name)",
  "EL054614": "When setting $1.value, selector type='attr' must specify a substitute name ($2. substitute name)",
  "EL054615": "When setting $1.value, selector type='css' must specify a subordinate name ($2. subsidiary name)",
  "EL054616": "Only selector type='value' | 'value' | 'text' | 'prop' | 'attr' | 'css' when setting $1.value.",
  "EL054617": "",
  "EL06100": "---- Meta.Entity.Bind.* ----",
  "EL06110": "---- base-bind.js ----",
  "EL06111": "$1._baseTable [MetaTable] instance not,",
  "EL06112": "$1.onExecute is of type 'function' ",
  "EL06113": "$1.onExecutted is of type 'function' ",
  "EL06114": "addColumn() is an abstract method",
  "EL061200": "---- bind-model.js ----",
  "EL061201": "$1._tables value is not of type [MetaTableCollection]",
  "EL061202": "$1._columnType value is not a child of [MetaColumn]",
  "EL061203": "$1.items value is not of type [PropertyCollection]",
  "EL061204": "$1.fn value is not of [PropertyCollection] type",
  "EL061205": "$1.command value is not of type [PropertyCollection]",
  "EL061206": "$1.cbFail is of type '(msg: stirng, valid: MetaView) => void'",
  "EL061207": "$1.cbError 는  '(msg: string, status: number, response: object) => void' It's type.",
  "EL061208": "$1.cbBaseBegin is of type '(cmd: BaseBindcommand) => void'",
  "EL061209": "$1.cbBaseValid 는  '(valid: MetaView, cmd: BaseBindCommand) => boolean' It's type.",
  "EL061210": "$1.cbBaseBind 는  '(view: MetaView, cmd: BaseBindCommand, config: object) => void' It's type.",
  "EL061211": "$1.cbBaseResult 는  '(data: object, cmd: BaseBindCommand, res: object) => object' It's type.",
  "EL061212": "$1.cbBaseOutput 는  '(views: MetaViewColleciton, cmd: BaseBindCommand, res: object) => void' It's type.",
  "EL061213": "$1.cbBaseEnd 는  '(status: number, cmd: BaseBindCommand, res: object) => void' It's type.",
  "EL061214": "$1.preRegister is of type '(bm: BaseBindModel) => void'",
  "EL061215": "$1.preCheck is of type '(bm: BaseBindModel) => boolean'",
  "EL061216": "$1.preReady is of type '(bm: BaseBindModel) => void'",
  "EL061217": "Column name is not of type 'string'. typeof columnName = '$1'",
  "EL061218": "_readItem(item, bEntity); item is of type string | string[]",
  "EL061219": "_readItem(); target table does not exist",
  "EL061220": "_readItem(); Target table is not of type [MetaTable]",
  "EL061221": "_readItem(); column generation failed",
  "EL061222": "setObject(oGuid, origin); oGuid.['_baseTable']$set lookup failed.guid = '$1'",
  "EL061223": "setObject(oGuid, origin); oGuid.['_baseTable'] guid not found: guid = '$1'",
  "EL061224": "addTable(name); name is of type 'string'. type of name = '$1'",
  "EL061225": "addTable(name); name value '$1' is a reserved word,",
  "EL061226": "addTable(name); name value '$1' is duplicated with an existing name",
  "EL061227": "addColumn(column, cmds, views, bTable); column 은 string | MetaColumn It's type.",
  "EL061228": "addColumn(column, cmds, views, bTable); cmds 은 string | string[] It's type.",
  "EL061229": "addColumn (column, cmds, views, bTable); Target table does not exist",
  "EL061230": "addColumn(column, cmds, views, bTable); cmds[$1] is not of string type. typeof cmds[$1] = '$2'",
  "EL061231": "addColumn(cmds, views, bTable); target command does not exist. cmds[$1] = '$2'",
  "EL061232": "addColumnValue(name, value, cmds, views, bTable); name 는 'string' It's type.",
  "EL061233": "addColumnValue (name, value, cmds, views, bTable); Target table does not exist",
  "EL061234": "mapping is not PropertyCollection | object type",
  "EL061235": "Target table does not exist",
  "EL061236": "column or item named '$1' does not exist // REVIEW: removed",
  "EL061237": "setMapping (bTable); Mapping failed",
  "EL061238": "addcommand() is an abstract method. [$1] must be inherited and implemented.",
  "EL061239": "tables are of string | string[] type",
  "EL061240": "setservice(service, passChk); service setup failed // REVIEW: removed",
  "EL061241": "command views are of type string[]. type of views == '$1'",
  "EL061242": "",
  "EL061300": "---- bind-command.js ----",
  "EL061301": "$1.valid [MetaView] instance not",
  "EL061302": "$1.bind [MetaView] instance not",
  "EL061303": "$1.outputOption Type is number | {option: number, index: number | number[] } 입니다.",
  "EL061304": "$1.cbBegin is of type '(cmd: BaseBindcommand) => void'",
  "EL061305": "$1.cbValid 는  '(valid: MetaView, cmd: BaseBindCommand) => boolean' It's type.",
  "EL061306": "$1.cbBind 는  '(view: MetaView, cmd: BaseBindCommand, config: object) => void' It's type.",
  "EL061307": "$1.cbResult 는  '(data: object, cmd: BaseBindCommand, res: object) => object' It's type.",
  "EL061308": "$1.cbOutput 는  '(views: MetaViewColleciton, cmd: BaseBindCommand, res: object) => void' It's type.",
  "EL061309": "$1.cbEnd 는  '(status: number, cmd: BaseBindCommand, res: object) => void' It's type.",
  "EL061310": "Column name is not of type 'string'. typeof columnName = '$1'",
  "EL061311": "Output['$1'] setting is MetaView type only",
  "EL061312": "setObject(oGuid, origin); oGuid.['_baseTable'] $set lookup failed: guid = $1",
  "EL061313": "setObject(oGuid, origin); oGuid.['_baseTable'] guid not found: guid = $1",
  "EL061314": "setObject(oGuid, origin); oGuid.['_model'] $set lookup failed. guid = $1",
  "EL061315": "Execute() is an abstract method. [$1] must be inherited and implemented.",
  "EL061316": "addColumn(column, views, bTable); Column is string | Meta Column type.",
  "EL061317": "addColumn(column, views, bTable); views are of the type string | string[].",
  "EL061318": "addColumn(column, views, bTable); Target table does not exist",
  "EL061319": "addColumn(column, views, bTable); views[$1] is not of string type. typeof views[$1] = '$2'",
  "EL061320": "addColumn(column, views, bTable); target views do not exist. views[$1] = '$2'",
  "EL061321": "addColumnValue(name, value, views, bTable); name is of type 'string'. typeof name = $1",
  "EL061322": "addColumnValue (name, value, views, bTable); Target table does not exist",
  "EL061323": "setColumn(names, views, bTable); The name is the string | string[] type.",
  "EL061324": "setColumn(names, views, bTable); names[$1] is not a string type. typeof names[$1] = '$2'",
  "EL061325": "setColumn(name, value, views, bTable); Target table does not exist",
  "EL061326": "setColumn(name, value, views, bTable); column($1) does not exist in target table",
  "EL061327": "release(names, views); The name is the string | string[] type.",
  "EL061328": "release(names, views); views are of the type string | string[].",
  "EL061329": "release(names, views); views[$1] is not of string type: typeof views[$1] = '$2'",
  "EL061330": "release(names, views); view($1) named '$1' does not exist",
  "EL061331": "newOutput(name); name is not of string type.",
  "EL061332": "newOutput(name); name value '$1' is duplicated with existing name",
  "EL061333": "removeOutput(name); name is not of string type: typeof name = '$1'",
  "EL061334": "removeOutput(name); built-in output($1) cannot be deleted",
  "EL061335": "removeOutput(names); view($1) named '$1' does not exist",
  "EL061336": "$1.state type is number",
  "EL06140": "---- empty ----",
  "EL06150": "---- bind-model.js ----",
  "EL06151": "$1.baseConfig is object type",
  "EL06152": "$1.url is the string type",
  "EL06153": "checkSelector(collection, viewLog); The collection is not of the [PropertyCollection] type.",
  "EL06154": "getSelector(collection); The collection is not of the [PropertyCollection] type.",
  "EL06155": "addcommand(name, opt, bTable); name is not of string type. typeof name = '$1'",
  "EL06156": "addcommand(name, opt, bTable); command addition failed",
  "EL06157": "setService(service, passChk); service setup failed",
  "EL06158": "addSelector(); selector is not of value, html, text type",
  "EL06159": "addSelector(); selector is not of string | object type. typeof selector = '$1'",
  "EL0615A": "addSelector(); addition of selector failed",
  "EL06160": "---- bind-command-ajax.js ----",
  "EL06161": "$1.config is object type",
  "EL06162": "$1.url is the string type",
  "EL06163": "_execOutput(data, res); data is not object | array type. typeof data = '$1'",
  "EL06164": "_execOutput(data, res); outputOption.index[$1] Value is not number. typeof outputOption.index[$1] = '$2'",
  "EL06165": "_execOutput(data, res); _output['$1'].columns does not exist",
  "EL06166": "[$2]th row does not exist in _execOutput(data, res); _output['$1'].rows",
  "EL06167": ""
};
